rails tutorial 第８章

HTTPについて
HTTPはステートレス (Stateless) なプロトコルです。
文字通り「状態 (state)」が「ない (less)」ので、HTTPのリクエスト１つ１つは、それより前のリクエストの情報をまったく利用できない、独立したトランザクションとして扱われます。
HTTPは言ってみれば、リクエストが終わると何もかも忘れて次回最初からやり直す健忘症的なプロトコルであり、
過去を捨てた旅から旅の流れ者的なプロトコルです (しかし、だからこそこのプロトコルは非常に頑丈なのです)。

セッションについて
ブラウザのあるページから別のページに移動したときに、ユーザーのIDを保持しておく手段がHTTPプロトコル内「には」まったくありません。
ユーザーログインの必要なWebアプリケーションでは、セッション (Session) と呼ばれる半永続的な接続をコンピュータ間 (ユーザーのパソコンのWebブラウザとRailsサーバーなど) に別途設定します。
セッションはHTTPプロトコルと階層が異なる (上の階層にある) ので、HTTPの特性とは別に (若干影響は受けるものの) 接続を確保できます。

cookieについて
Railsでセッションを実装する方法として最も一般的なのは、cookiesを使う方法です。cookiesとは、ユーザーのブラウザに保存される小さなテキストデータです。
cookiesは、あるページから別のページに移動した時にも破棄されないので、ここにユーザーIDなどの情報を保存できます。

rails routesコマンドについて
rails routesコマンドを実行してみましょう。いつでも現状のルーティングを確認することができます。

rubyの性質
Rubyではnilとfalse以外のすべてのオブジェクトは、真偽値ではtrueになるという性質を持つ

flash.nowの性質
flashのメッセージとは異なり、flash.nowのメッセージはその後リクエストが発生したときに消滅します
