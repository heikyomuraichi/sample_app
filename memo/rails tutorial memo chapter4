rails tutorial 重要ワード等のメモ

モジュールについて
Rubyのクラスでincludeを使用すると、このモジュールをミックスイン (mixed in)できます。
単なるRubyのコードを書くのであれば、モジュールを作成するたびに明示的にインクルードして使用するのが普通ですが、
Railsでは自動的にヘルパーモジュールをインクルードしてくれるので、include行をわざわざ書く必要がありません。

配列について
多くのコンピュータ言語の慣習と同様、Rubyの配列でもゼロオリジンを採用しています。

mapについて
mapメソッドは、与えられたブロックを配列や範囲オブジェクトの各要素に対して適用し、その結果を返します。

ハッシュについて
ハッシュは、本質的には配列と同じですが、インデックスとして整数値以外のものも使用できる点が配列と異なります
(この理由から、いくつかの言語 (特にPerl) ではハッシュを連想配列と呼ぶこともあります)。
ハッシュのインデックス (キーと呼ぶのが普通です) は、通常何らかのオブジェクトです。
["first_name"] = "Michael"     # キーが "first_name" で値が "Michael"

シンボルについて
Railsのハッシュキーでは文字列よりもシンボルの方が広く使用されています。シンボルは文字列と似ていますが、
クォートで囲む代わりにコロンが前に置かれている点が異なります。たとえば、:nameはシンボルです。
もちろん、シンボルを「余分なものを削ぎ落した軽量な文字列」とみなしても構いません。

inspectメソッド
inspectメソッドを紹介します。これは要求されたオブジェクトを表現する文字列を返します。
ところで、オブジェクトを表示するためにinspectを使用することは非常によくあることなので、 p関数というショートカットがあります


関数の呼び出しについて
実は、Ruby では丸かっこは使用してもしなくても構いません。以下の2つの行は同等です。
# 関数呼び出しの丸かっこは省略可能。
stylesheet_link_tag('application', media: 'all',
                                   'data-turbolinks-track' => true)
stylesheet_link_tag 'application', media: 'all',
                                   'data-turbolinks-track' => true

ハッシュについて
:media引数はハッシュのようですが、波かっこがない点が不思議です。
実は、ハッシュが関数呼び出しの最後の引数である場合は、波かっこを省略できます。以下の2つの行は同等です。

# 最後の引数がハッシュの場合、波かっこは省略可能。
stylesheet_link_tag 'application', { media: 'all',　#新式ハッシュ記法
                                    'data-turbolinks-track' => true　＃旧式ハッシュ記法 }
stylesheet_link_tag 'application', media: 'all',
                                  'data-turbolinks-track' => true

インスタンス変数について
Railsでは、インスタンス変数を作成するだけでビューで自動的に使えるようになるという点に主な利用価値がありますが、
一般的には、インスタンス変数はRubyのそのクラス内のどこでも利用できるようにしたい変数として使われます(これについては後で詳しく説明します)。
インスタンス変数は常に@記号で始まり、未定義の状態では値がnilになります。
