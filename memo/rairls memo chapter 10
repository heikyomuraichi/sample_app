railsはどのように神姫ユーザー用のpostリクエストとpatchリクエストを区別するのか
Railsはどうやって新規ユーザー用のPOSTリクエストとユーザー編集用のPATCHリクエストを区別するのでしょうか。
その答えは、Railsは、ユーザーが新規なのか、それともデータベースに存在する既存のユーザーであるかを、Active Recordのnew_record?論理値メソッドを使って区別できるからです。

 assert_template 'users/edit'→テストコードとしてusers配下にあるedit.html.erbがきちんと描画されているかをチェックする

user_path→resourcesでルーティングを生成したときに自動で生成されるヘルパーメソッド

受け入れテストについて
アプリケーション用のコードを「実装する前に」統合テストを書いた方が便利
そういったテストのことは「受け入れテスト (Acceptance Tests)」
として呼ばれていて、ある機能の実装が完了し、
受け入れ可能な状態になったかどうかを決めるテストとして知られています。

@user.reloadについて
データベースから最新のユーザー情報を読み込み直して、
正しく更新されたかどうかを確認している

update_attributesについて
update_attributesはデータベースの値を複数同時に更新するために利用します。
例 user.update_attributes(name: "侍 次郎", age: 20)

allow_nil: trueについて
値が空の場合バリデーションが作動しない

セキュリティモデルについて
ユーザーにログインを要求し、
かつ自分以外のユーザー情報を変更できないように制御
→と云ったセキュリティ上の制御機構のこと

ログインしていないユーザーが保護されたページにアクセスしようとした際のケースについて
Usersコントローラの中でbeforeフィルターを使う。
beforeフィルターは、before_actionメソッドを使って
何らかの処理が実行される直前に特定のメソッドを実行する仕組み
→ before_action :logged_in_user, only: [:edit, :update]
はeditメソッド、updateメソッドが実行される前にlogged_in_userが実行される仕組み

ログイン後にリダイレクト元のurlへ遷移する仕組み
転送先のURLを保存する仕組みは、8.2.1でユーザーをログインさせたときと同じで、session変数を使います。
requestオブジェクトも使っています (request.original_urlでリクエスト先が取得できます)。
ただし、GETリクエストが送られたときだけ格納するようにしておきます。
（例えばログインしていないユーザーがフォームを使って送信した場合、転送先のURLを保存させないようにできます。）
session[:forwarding_url] || default
このコードは、値がnilでなければsession[:forwarding_url]を評価し、そうでなければデフォルトのURLを使っています。

assert_selectとは
アプリケーションのビューのテストを行う際に使うアサーションメソッド
書式
assert_select(セレクタ, [条件], [メッセージ])

使用例
assert_select 'title', "Sign Up page"
だったら、title要素の内容を検証する際に使う
※アサーションとは、ある条件が成立しているかどうかをチェックすることを言う

pagenateメソッドについて
paginateでは、キーが:pageで値がページ番号のハッシュを引数に取ります。
User.paginateは、:pageパラメーターに基いて、データベースからひとかたまりのデータ 
(デフォルトでは30) を取り出します。
したがって、1ページ目は1から30のユーザー、2ページ目は31から60のユーザーといった具合にデータが取り出されます。
ちなみにpageがnilの場合、 paginateは単に最初のページを返します。